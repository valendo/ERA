@inherits RazorFunction

@functions {
    public override string FunctionDescription
    {
        get  { return "Show product detail"; }
    }
    
    public static string convertToUnSign(string s)
    {
        System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\p{IsCombiningDiacriticalMarks}+");
        string temp = s.Normalize(System.Text.NormalizationForm.FormD);
        return regex.Replace(temp, String.Empty).Replace('\u0111', 'd').Replace('\u0110', 'D');
    }

    public static string GetUrlFromTitle(string title)
    {
        const string autoRemoveChars = @",./\?#!""@+'`´*():;$%&=¦§";
        var generated = new System.Text.StringBuilder();

        foreach (var c in title.Where(c => autoRemoveChars.IndexOf(c) == -1))
        {
            generated.Append(c);
        }

        var url = generated.ToString().Replace(" ", "-");

        return convertToUnSign(url.ToLower());
    }

    string PathInfoString(int segment)
    {
        string pathInfo = Composite.Core.Routing.Pages.C1PageRoute.GetPathInfo() ?? string.Empty;
        string[] segments = pathInfo.Split('/');
        return segments.Skip(segment + 1).FirstOrDefault();
    }
}

@{
    Composite.Core.Routing.Pages.C1PageRoute.RegisterPathInfoUsage();
    var cateId = Data.Get<My.Content.Categories>().Where(t => GetUrlFromTitle(t.Title) == PathInfoString(0)).SingleOrDefault().Id;
    var product = Data.Get<My.Content.Product>().Where(t => t.Category == cateId && GetUrlFromTitle(t.Title) == PathInfoString(1)).SingleOrDefault();
}

<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
    </head>
    <body>
        <br /><br />
        <h3>@product.Title</h3>
        <div>@Html.Raw(product.Content)</div>
    </body>
</html>